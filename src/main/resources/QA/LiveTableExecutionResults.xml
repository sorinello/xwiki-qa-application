<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>QA</web>
  <name>LiveTableExecutionResults</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent/>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1349358428000</creationDate>
  <date>1356562188000</date>
  <contentUpdateDate>1356562188000</contentUpdateDate>
  <version>1.1</version>
  <title>LiveTableExecutionResults</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{include document="XWiki.LiveTableResultsMacros" /}}

{{velocity output="false"}}
#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(QA_gridresultwithfilter $collist)
  #if($xcontext.action == 'get' &amp;&amp; "$!{request.outputSyntax}" == 'plain')
    $response.setContentType('application/json')
    ## Build the JSON in memory (using basic Java data types) so that it can be adjusted before serialization.
    #set($map = {})
    #QA_gridresultwithfilter_buildJSON($collist $map)
    $jsontool.serialize($map)
  #end
#end

#**
 * Builds the JSON response to a live table data call.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(QA_gridresultwithfilter_buildJSON $collist $map)
  #set($sql = "BaseObject as obj , StringProperty platform  where obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?)  and obj.id=platform.id.id and platform.name = ? and doc.fullName = ?  order by platform.value asc")
  #set($countSql = )
  #set($sqlparams = )
  #QA_gridresult_buildRowsJSON($map)
#end

#**
 * Adds information about each live table row to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables defined by gridresultwithfilter_buildQuery.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(QA_gridresult_buildRowsJSON $map)
  #set($offset = $mathtool.toInteger($request.get('offset')))
  ## offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if (!$offset || $offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $mathtool.toInteger($request.get('limit')))
  #if (!$limit)
    #set ($limit = 15)
  #end
  #set($query = $services.query.hql($sql).addFilter('hidden').setLimit($limit).setOffset($offset).bindValues($sqlParams))
  #set($items = $query.execute())
  #set($discard = $map.put('totalrows', $query.count()))
  #set($discard = $map.put('returnedrows', $mathtool.min($items.size(), $limit)))
  #set($discard = $map.put('offset', $mathtool.add($offset, 1)))
  #set($rows = [])
  #foreach($item in $items)
    #gridresult_buildRowJSON($item $rows)
  #end
  #set($discard = $map.put('rows', $rows))
#end
{{/velocity}}

{{velocity wiki="false"}}
#QA_gridresultwithfilter($request.collist.split(','))
{{/velocity}}</content>
</xwikidoc>
